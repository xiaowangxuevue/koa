'use strict'

/**
 * Expose compositor.
 */

module.exports = compose

/**
 * Compose `middleware` returning
 * a fully valid middleware comprised
 * of all those which are passed.
 *
 * @param {Array} middleware
 * @return {Function}
 * @api public
 */

function compose (middleware) {   //传入middleware数组
  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')
  for (const fn of middleware) {
    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')
  }

  /**
   * @param {Object} contextyuu
   * @return {Promise}
   * @api public
   */

  return function (context, next) {
    // last called middleware #
    let index = -1  //index计数
    return dispatch(0)  //调用dispatch,传入0
    function dispatch (i) {
      if (i <= index) return Promise.reject(new Error('next() called multiple times'))  //i小于index，证明在中间件内调用了不止一次的next（），抛出错误
      index = i  //更新index的值
      let fn = middleware[i]  //middleware中的函数,从第一个开始
      if (i === middleware.length) fn = next  //如果i走到了最后一个的后面，就让fn为next，此时fn为underfined
      if (!fn) return Promise.resolve()   //那么这个时候就直接resolve
      try {
       /*  .context也就是中间件函数里的ctx
        .dispatch.bind(null,i+1)下一个中间件函数,用bind把this指向null，也就是中间件函数里的next */

        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));
        // 将其包装成一个Promise resolve态，主要作用是区分reject
      } catch (err) {
        return Promise.reject(err)  //catch错误，并reject
      }
    }
  }
}
